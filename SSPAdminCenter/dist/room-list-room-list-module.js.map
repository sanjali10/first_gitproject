{"version":3,"sources":["webpack:///./src/app/layout/room-list/dialogs/add/add.dialog.component.ts","webpack:///./src/app/layout/room-list/dialogs/add/add.dialog.css","webpack:///./src/app/layout/room-list/dialogs/add/add.dialog.html","webpack:///./src/app/layout/room-list/room-list-routing.module.ts","webpack:///./src/app/layout/room-list/room-list.component.html","webpack:///./src/app/layout/room-list/room-list.component.scss","webpack:///./src/app/layout/room-list/room-list.component.ts","webpack:///./src/app/layout/room-list/room-list.module.ts","webpack:///./src/app/layout/room-list/services/o365Auth.service.ts"],"names":[],"mappings":"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","file":"room-list-room-list-module.js","sourcesContent":["import { debounceTime } from 'rxjs/operators';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\r\nimport { Component, Inject, OnInit } from '@angular/core';\r\nimport { RoomListService } from '../../services/room-list.service';\r\nimport { O365AuthService } from '../../services/o365Auth.service';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Room } from '../../interfaces/room';\r\nimport { TokenStorage } from '../../../../core/token.storage';\r\n\r\n@Component({\r\n    selector: 'app-add.dialog',\r\n    templateUrl: './add.dialog.html',\r\n    styleUrls: ['./add.dialog.css'],\r\n})\r\nexport class AddDialogComponent implements OnInit {\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AddDialogComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: Room,\r\n        public o365AuthService: O365AuthService,\r\n        public dataService: RoomListService,\r\n        private addRoomFB: FormBuilder,\r\n        private token: TokenStorage,\r\n    ) {}\r\n    addGroupForm: FormGroup;\r\n    roomSearchResult = [];\r\n\r\n    ngOnInit() {\r\n        this.addGroupForm = this.addRoomFB.group({\r\n            RoomName: new FormControl('', [Validators.required]),\r\n            Account: new FormControl('', [Validators.required, Validators.email]),\r\n            TenantId: [this.token.getTenantName()],\r\n            TenantValue: [this.token.getTenantName()],\r\n        });\r\n\r\n        this.addGroupForm\r\n            .get('RoomName')\r\n            .valueChanges.pipe(debounceTime(400))\r\n            .subscribe(data => {\r\n                this.o365AuthService.getO365Rooms(data, response => {\r\n                    if (\r\n                        response.length === 0 ||\r\n                        false ===\r\n                            (response.length >= 0 &&\r\n                                response[0].emailId.toString() ===\r\n                                    this.addGroupForm.get('Account').value.toString() &&\r\n                                response[0].name.toString() ===\r\n                                    this.addGroupForm.get('RoomName').value.toString())\r\n                    ) {\r\n                        this.addGroupForm.get('Account').setValue('');\r\n                    }\r\n                    this.roomSearchResult = response;\r\n                });\r\n            });\r\n    }\r\n\r\n    roomSelection(room) {\r\n        this.addGroupForm.get('RoomName').setValue(room.name);\r\n        this.addGroupForm.get('Account').setValue(room.emailId);\r\n    }\r\n\r\n    submit() {\r\n        // emppty stuff\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public confirmAdd(): void {\r\n        if (this.addGroupForm.valid) {\r\n            this.dataService.createRoom(this.addGroupForm.value).subscribe(data => {\r\n                console.log('d');\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"    .container {\\r\\n        display: flex;\\r\\n        flex-direction: column;\\r\\n        min-width: 450px;\\r\\n    }\\r\\n\\r\\n    .container>* {\\r\\n        width: 100%;\\r\\n    }\\r\\n\\r\\n    .form {\\r\\n        display: flex;\\r\\n        padding-top: 6px;\\r\\n    }\\r\\n\\r\\n    .mat-form-field {\\r\\n        font-size: 16px;\\r\\n        flex-grow: 1;\\r\\n    }\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <h1 mat-dialog-title>{{'AddRoom' | translate }}</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <form id='addRoomForm' fxLayout=\\\"column\\\" name='addRoomForm' #addRoomForm [formGroup]=\\\"addGroupForm\\\">\\r\\n            <mat-form-field class=\\\"align-center\\\">\\r\\n                <input id='RoomName' name='RoomName' #RoomName matInput placeholder=\\\"{{'RoomName' | translate }}\\\"\\r\\n                    formControlName=\\\"RoomName\\\" [matAutocomplete]=\\\"auto\\\">\\r\\n                <mat-autocomplete #auto=\\\"matAutocomplete\\\">\\r\\n                    <mat-option *ngFor=\\\"let room of roomSearchResult\\\" [value]=\\\"room.name\\\" (onSelectionChange)=\\\"roomSelection(room)\\\">\\r\\n                        {{ room.name }}\\r\\n                    </mat-option>\\r\\n                </mat-autocomplete>\\r\\n                <mat-error *ngIf=\\\"addGroupForm.get('RoomName').hasError('required')\\\">{{'EnterValue' | translate }}</mat-error>\\r\\n            </mat-form-field>\\r\\n        </form>\\r\\n    </div>\\r\\n    <div mat-dialog-actions>\\r\\n        <button mat-button [type]=\\\"submit\\\" [mat-dialog-close]=\\\"1\\\" [disabled]='addGroupForm.invalid' (click)=\\\"confirmAdd()\\\">{{'Save'\\r\\n            | translate }}</button>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\" tabindex=\\\"-1\\\">{{'Cancel' | translate }}</button>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RoomListComponent } from './room-list.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: RoomListComponent,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class RoomListRoutingModule {}\r\n","module.exports = \"<mat-card-title>{{ 'RoomList' | translate }}</mat-card-title>\\r\\n\\r\\n<mat-card class=\\\"custom_mat_list\\\">\\r\\n    <mat-card-content>\\r\\n        <form id='filterForm' [formGroup]=\\\"filterForm\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>{{ 'View' | translate }}</mat-label>\\r\\n                <mat-select (selectionChange)=\\\"onSelection($event)\\\" formControlName=\\\"View\\\">\\r\\n                    <mat-option *ngFor=\\\"let state of view\\\" [value]=\\\"state.value\\\">\\r\\n                        {{ state.viewValue }}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field floatPlaceholder=\\\"never\\\" color=\\\"accent\\\">\\r\\n                <input matInput #filter placeholder=\\\"{{'SearchRoom' | translate }}\\\" id=\\\"room-Id-Search-Box\\\" formControlName=\\\"Search\\\">\\r\\n            </mat-form-field>\\r\\n        </form>\\r\\n    </mat-card-content>\\r\\n</mat-card>\\r\\n\\r\\n<div class=\\\"example-container mat-elevation-z8 table_space\\\">\\r\\n    <mat-table #table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-cell\\\">\\r\\n\\r\\n        <!-- Checkbox Column -->\\r\\n        <!-- <ng-container matColumnDef=\\\"select\\\">\\r\\n            <mat-header-cell *matHeaderCellDef>\\r\\n                <mat-checkbox (change)=\\\"$event ? masterToggle() : null\\\" [checked]=\\\"selection.hasValue() && isAllSelected()\\\"\\r\\n                    [indeterminate]=\\\"selection.hasValue() && !isAllSelected()\\\">\\r\\n                </mat-checkbox>\\r\\n            </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let row\\\">\\r\\n                <mat-checkbox (click)=\\\"$event.stopPropagation()\\\" (change)=\\\"$event ? selection.toggle(row) : null\\\"\\r\\n                    [checked]=\\\"selection.isSelected(row)\\\">\\r\\n                </mat-checkbox>\\r\\n            </mat-cell>\\r\\n        </ng-container> -->\\r\\n\\r\\n        <!-- Position Column  -->\\r\\n        <ng-container matColumnDef=\\\"Activated\\\">\\r\\n            <mat-header-cell *matHeaderCellDef mat-sort-header> {{'Status' | translate }} </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.Activated ? ('Active' | translate) : ('Unassigned' |\\r\\n                translate)}} </mat-cell>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Room Name Column -->\\r\\n        <ng-container matColumnDef=\\\"RoomName\\\">\\r\\n            <mat-header-cell *matHeaderCellDef mat-sort-header> {{'RoomName' | translate }} </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.RoomName}} </mat-cell>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Place Column -->\\r\\n        <ng-container matColumnDef=\\\"Place\\\">\\r\\n            <mat-header-cell *matHeaderCellDef mat-sort-header> {{'Place' | translate }} </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.Place}} </mat-cell>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Devices Column -->\\r\\n        <ng-container matColumnDef=\\\"Devices\\\">\\r\\n            <mat-header-cell *matHeaderCellDef> {{'Device' | translate }} </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\">\\r\\n                <span *ngFor=\\\"let device of element.Devices\\\">\\r\\n                    <mat-icon matListIcon *ngIf=\\\"device.DeviceName\\\"><img src=\\\"../../../assets/images/{{device.Device}}.png\\\"\\r\\n                            style=\\\"width: 75%; height: 75%\\\" alt=\\\"Desc 1 \\\"></mat-icon>\\r\\n                </span>\\r\\n            </mat-cell>\\r\\n        </ng-container>\\r\\n\\r\\n        <!-- Account Column -->\\r\\n        <ng-container matColumnDef=\\\"Account\\\">\\r\\n            <mat-header-cell fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" *matHeaderCellDef mat-sort-header>\\r\\n                <span fxLayoutAlign=\\\"start center\\\"> {{'Account' | translate }} </span>\\r\\n                <button class=\\\"icon_btn\\\" mat-icon-button color=\\\"primary\\\" id=\\\"sspRoom-Id-Add-Room\\\" (click)=\\\"addNew()\\\">\\r\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">add</mat-icon>\\r\\n                </button>\\r\\n                <button class=\\\"icon_btn\\\" mat-icon-button fxLayoutAlign=\\\"end center\\\" color=\\\"primary\\\" (click)=\\\"refresh()\\\">\\r\\n                    <mat-icon aria-label=\\\"Example icon-button with a heart icon\\\">refresh</mat-icon>\\r\\n                </button>\\r\\n            </mat-header-cell>\\r\\n            <mat-cell *matCellDef=\\\"let element\\\"> {{element.Account}} </mat-cell>\\r\\n        </ng-container>\\r\\n\\r\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" (dblclick)=\\\"navigateRoomDetails(row)\\\">\\r\\n            <!-- (click)=\\\"selection.toggle(row)\\\" -->\\r\\n        </mat-row>\\r\\n    </mat-table>\\r\\n    <div class=\\\"no-results\\\" [style.display]=\\\"dataSource.renderedData.length == 0 ? '' : 'none'\\\">\\r\\n        No results\\r\\n    </div>\\r\\n    <mat-paginator #paginator class=\\\"custom_mat_paginator\\\" [length]=\\\"dataSource.filteredData.length\\\" [pageIndex]=\\\"0\\\" [pageSize]=\\\"10\\\"\\r\\n        [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\">\\r\\n    </mat-paginator>\\r\\n</div>\\r\\n\"","module.exports = \".table_space {\\n  margin-top: 15px; }\\n\\nmat-table mat-header-row mat-header-cell {\\n  background-color: #727672 !important;\\n  color: #ffffff !important;\\n  font-size: 14px !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field.mat-form-field-invalid div.mat-form-field-underline span.mat-form-field-ripple {\\n  background-color: #e47e13 !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field.mat-focused div.mat-form-field-underline span.mat-form-field-ripple {\\n  background-color: #12a7bb !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field div.mat-form-field-infix mat-select.mat-select div.mat-select-trigger div.mat-select-arrow-wrapper div.mat-select-arrow {\\n  color: #303331 !important; }\\n\\n/* Text Field */\\n\\n:host ::ng-deep .custom_mat_list mat-form-field div.mat-form-field-wrapper {\\n  padding: 6px 0 16px 0 !important;\\n  margin: 0 12px !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field.mat-focused div.mat-form-field-infix input.mat-input-element {\\n  color: #303331 !important;\\n  font-size: 14px !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field div.mat-form-field-infix input {\\n  padding: 0.4em 0; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field div.mat-form-field-infix span.mat-form-field-label-wrapper label.mat-form-field-label {\\n  color: #303331 !important;\\n  font-size: 18px !important; }\\n\\n:host ::ng-deep .custom_mat_list mat-form-field.mat-focused div.mat-form-field-infix span.mat-form-field-label-wrapper label.mat-form-field-label {\\n  color: #303331 !important;\\n  font-size: 18px !important; }\\n\\n/* Button */\\n\\n.icon_btn {\\n  color: #ffffff !important;\\n  outline: none !important;\\n  place-content: center !important;\\n  /*margin: 0 5px 0 5px !important*/ }\\n\\n.icon_btn:hover {\\n  color: #12a7bb !important;\\n  outline: none !important;\\n  place-content: center !important; }\\n\\n/* Pageination */\\n\\n:host ::ng-deep .custom_mat_paginator mat-form-field.mat-focused div.mat-form-field-underline span.mat-form-field-ripple {\\n  background-color: #12a7bb !important; }\\n\\n:host ::ng-deep .custom_mat_paginator mat-form-field div.mat-form-field-infix mat-select.mat-select div.mat-select-trigger div.mat-select-arrow-wrapper div.mat-select-arrow {\\n  color: #303331 !important; }\\n\\n:host ::ng-deep .custom_mat_paginator div.mat-paginator-range-actions div.mat-paginator-range-label {\\n  color: #303331 !important; }\\n\\n:host ::ng-deep .custom_mat_paginator div.mat-paginator-range-actions button.mat-icon-button {\\n  outline: none !important; }\\n\\n.no-results {\\n  text-align: center;\\n  padding: 25px 0; }\\n\"","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { Router } from '@angular/router';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { merge, fromEvent, Observable, BehaviorSubject } from 'rxjs';\r\nimport { MatDialogConfig, MatDialog, MatPaginator, MatSort } from '@angular/material';\r\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { TokenStorage } from '../../core/token.storage';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AddDialogComponent } from './dialogs/add/add.dialog.component';\r\n\r\nimport { Room } from './interfaces/room';\r\nimport { RoomListService } from './services/room-list.service';\r\nimport { O365AuthService } from './services/o365Auth.service';\r\nimport * as Msal from 'msal';\r\n// Discard emitted values that take less than the specified time between output\r\nconst DEBOUNCE_TIME = 150;\r\n\r\n@Component({\r\n    selector: 'app-room-list',\r\n    templateUrl: './room-list.component.html',\r\n    styleUrls: ['./room-list.component.scss'],\r\n})\r\nexport class RoomListComponent implements OnInit {\r\n    view = [\r\n        { value: 'all', viewValue: 'All' },\r\n        { value: 'active', viewValue: 'Active' },\r\n        { value: 'unassigned', viewValue: 'Unassigned' },\r\n    ];\r\n\r\n    displayedColumns: string[] = ['Activated', 'RoomName', 'Place', 'Devices', 'Account'];\r\n    // dataSource = new MatTableDataSource<Room>(ROOM_DATA);\r\n    selection = new SelectionModel<Room>(true, []);\r\n    roomDatabase: RoomListService | null;\r\n    dataSource: RoomDataSource | null;\r\n\r\n    defaultDialogConfig = new MatDialogConfig();\r\n\r\n    @ViewChild(MatPaginator)\r\n    paginator: MatPaginator;\r\n    @ViewChild(MatSort)\r\n    sort: MatSort;\r\n    @ViewChild('filter')\r\n    filter: ElementRef;\r\n\r\n    filterForm: FormGroup;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private o365AuthService: O365AuthService,\r\n        private roomListService: RoomListService,\r\n        public dialog: MatDialog,\r\n        private token: TokenStorage,\r\n        public httpClient: HttpClient,\r\n    ) {\r\n        this.defaultDialogConfig.disableClose = true;\r\n        this.defaultDialogConfig.autoFocus = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.filterForm = new FormGroup({\r\n            View: new FormControl('all'),\r\n            Search: new FormControl(''),\r\n        });\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        this.loadData();\r\n    }\r\n\r\n    public loadData() {\r\n        this.roomDatabase = new RoomListService(this.httpClient, this.token);\r\n        this.dataSource = new RoomDataSource(this.roomDatabase, this.paginator, this.sort);\r\n        fromEvent(this.filter.nativeElement, 'keyup')\r\n            .pipe(\r\n                debounceTime(DEBOUNCE_TIME),\r\n                distinctUntilChanged(),\r\n            )\r\n            .subscribe(() => {\r\n                if (!this.dataSource) {\r\n                    return;\r\n                }\r\n                this.dataSource.filter = this.filterForm.value;\r\n            });\r\n    }\r\n\r\n    /** Whether the number of selected elements matches the total number of rows. */\r\n    isAllSelected() {\r\n        const numSelected = this.selection.selected.length;\r\n        const numRows = this.dataSource.renderedData.length;\r\n        return numSelected === numRows;\r\n    }\r\n\r\n    onSelection(e) {\r\n        if (!this.dataSource) {\r\n            return;\r\n        }\r\n        this.dataSource.filter = this.filterForm.value as SearchForm;\r\n    }\r\n\r\n    /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n    masterToggle() {\r\n        this.isAllSelected()\r\n            ? this.selection.clear()\r\n            : this.dataSource.renderedData.forEach(row => this.selection.select(row));\r\n    }\r\n\r\n    navigateRoomDetails(row) {\r\n        const route = '/roomdetail/' + row.id;\r\n        this.router.navigate([route]);\r\n    }\r\n\r\n    addNew(room: Room) {\r\n        this.o365AuthService.getUser().then((user: Msal.User) => {\r\n            if (user.idToken == null) {\r\n                this.o365AuthService.login();\r\n            } else {\r\n                this.defaultDialogConfig.data = { tenant: room };\r\n                const dialogRef = this.dialog.open(AddDialogComponent, this.defaultDialogConfig);\r\n\r\n                dialogRef.afterClosed().subscribe(result => {\r\n                    if (result === 1) {\r\n                        this.refresh();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\ninterface SearchForm {\r\n    View: string;\r\n    Search: string;\r\n}\r\n\r\nexport class RoomDataSource extends DataSource<Room> {\r\n    _filterChange = new BehaviorSubject({ View: 'all', Search: '' } as SearchForm);\r\n\r\n    get filter(): SearchForm {\r\n        return this._filterChange.value;\r\n    }\r\n\r\n    set filter(filter: SearchForm) {\r\n        this._filterChange.next(filter);\r\n    }\r\n\r\n    filteredData: Room[] = [];\r\n    renderedData: Room[] = [];\r\n\r\n    constructor(\r\n        public _roomDatabase: RoomListService,\r\n        public _paginator: MatPaginator,\r\n        public _sort: MatSort,\r\n    ) {\r\n        super();\r\n        // Reset to the first page when the user changes the filter.\r\n        this._filterChange.subscribe(() => (this._paginator.pageIndex = 0));\r\n    }\r\n\r\n    /** Connect function called by the table to retrieve one stream containing the data to render. */\r\n    connect(): Observable<Room[]> {\r\n        // Listen for any changes in the base data, sorting, filtering, or pagination\r\n        const displayDataChanges = [\r\n            this._roomDatabase.dataChange,\r\n            this._sort.sortChange,\r\n            this._filterChange,\r\n            this._paginator.page,\r\n        ];\r\n        this._roomDatabase.getAllRooms();\r\n        return merge(...displayDataChanges).pipe(\r\n            map(() => {\r\n                // Filter data\r\n                this.filteredData = this._roomDatabase.data.slice().filter((room: Room) => {\r\n                    let isMatched = false;\r\n                    const roomStatus =\r\n                        this.filter.View === 'all'\r\n                            ? null\r\n                            : this.filter.View === 'active'\r\n                                ? true\r\n                                : false;\r\n                    if (roomStatus == null && this.filter.Search.length === 0) {\r\n                        isMatched = true;\r\n                    } else if (roomStatus !== null && this.filter.Search.length > 0) {\r\n                        const searchStr = (\r\n                            room.RoomName +\r\n                            room.Account +\r\n                            room.Place +\r\n                            room.Note\r\n                        ).toLowerCase();\r\n                        if (\r\n                            room.Activated === roomStatus &&\r\n                            searchStr.indexOf(this.filter.Search.toLowerCase()) !== -1\r\n                        ) {\r\n                            isMatched = true;\r\n                        }\r\n                    } else if (roomStatus !== null && room.Activated === roomStatus) {\r\n                        isMatched = true;\r\n                    } else if (this.filter.Search.length > 0) {\r\n                        const searchStr = (\r\n                            room.RoomName +\r\n                            room.Account +\r\n                            room.Place +\r\n                            room.Note\r\n                        ).toLowerCase();\r\n                        isMatched = searchStr.indexOf(this.filter.Search.toLowerCase()) !== -1;\r\n                    }\r\n                    return isMatched;\r\n                });\r\n\r\n                const sortedData = this.sortData(this.filteredData.slice());\r\n\r\n                // Grab the page's slice of the filtered sorted data.\r\n                const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\r\n                this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\r\n                return this.renderedData;\r\n            }),\r\n        );\r\n    }\r\n\r\n    disconnect() {}\r\n\r\n    /** Returns a sorted copy of the database data. */\r\n    sortData(data: Room[]): Room[] {\r\n        if (!this._sort.active || this._sort.direction === '') {\r\n            return data;\r\n        }\r\n        return data.sort((a, b) => {\r\n            let propertyA: number | string | boolean = '';\r\n            let propertyB: number | string | boolean = '';\r\n\r\n            switch (this._sort.active) {\r\n                case 'Activated':\r\n                    [propertyA, propertyB] = [a.Activated.valueOf(), b.Activated.valueOf()];\r\n                    break;\r\n                case 'RoomName':\r\n                    [propertyA, propertyB] = [a.RoomName, b.RoomName];\r\n                    break;\r\n                case 'Place':\r\n                    [propertyA, propertyB] = [a.Place, b.Place];\r\n                    break;\r\n                case 'Account':\r\n                    [propertyA, propertyB] = [a.Account, b.Account];\r\n                    break;\r\n                case 'RoomId':\r\n                    [propertyA, propertyB] = [a.RoomId, b.RoomId];\r\n                    break;\r\n                case 'Note':\r\n                    [propertyA, propertyB] = [a.Note, b.Note];\r\n                    break;\r\n            }\r\n\r\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\r\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\r\n\r\n            return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RoomListRoutingModule } from './room-list-routing.module';\r\nimport { RoomListComponent } from './room-list.component';\r\nimport { RoomListService } from './services/room-list.service';\r\nimport { AppMaterialModule } from '../../material/material.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatDialogModule, MatSortModule, MatPaginatorModule } from '@angular/material';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { Interceptor } from '../../app.interceptor';\r\nimport { AddDialogComponent } from './dialogs/add/add.dialog.component';\r\nimport { O365AuthService } from './services/o365Auth.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RoomListRoutingModule,\r\n        AppMaterialModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatPaginatorModule,\r\n        TranslateModule,\r\n        FlexLayoutModule,\r\n    ],\r\n    entryComponents: [AddDialogComponent],\r\n    providers: [\r\n        {\r\n            provide: HTTP_INTERCEPTORS,\r\n            useClass: Interceptor,\r\n            multi: true,\r\n        },\r\n        RoomListService, O365AuthService\r\n    ],\r\n    declarations: [RoomListComponent, AddDialogComponent],\r\n})\r\nexport class RoomListModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TokenStorage } from '../../../core/token.storage';\r\n\r\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\r\nimport * as MicrosoftGraphClient from '@microsoft/microsoft-graph-client/lib/src';\r\n\r\nimport { environment } from '../../../../environments/environment';\r\nimport * as Msal from 'msal';\r\n\r\n// import { SspRoomService } from './ssp-room.service';\r\n\r\nconst graphAPIScopes = [\r\n    'User.ReadBasic.All',\r\n    'Contacts.Read',\r\n    'Contacts.ReadWrite',\r\n    'Files.ReadWrite.All',\r\n    'Calendars.ReadWrite',\r\n    'Calendars.ReadWrite.Shared',\r\n    'People.Read'\r\n];\r\n\r\nconst logger = new Msal.Logger(loggerCallback, {\r\n    level: Msal.LogLevel.Verbose,\r\n    correlationId: '12345'\r\n});\r\nfunction loggerCallback(logLevel, message, piiEnabled) {\r\n    console.log(message);\r\n}\r\n\r\nlet userAgentApplication = new Msal.UserAgentApplication(\r\n    environment.msalconfig.clientID,\r\n    null,\r\n    authCallback,\r\n    {\r\n        cacheLocation: 'localStorage',\r\n        logger: logger,\r\n        redirectUri: environment.msalconfig.redirectUri\r\n        // isAngular: true // MSAL library future support for Angular\r\n    }\r\n); // cacheLocation defaults to sessionStorage if not set in the constructor\r\n\r\nfunction authCallback(errorDesc, token, error, tokenType) {\r\n    // This function is called after loginRedirect and acquireTokenRedirect. Use tokenType to determine context.\r\n    // For loginRedirect, tokenType = 'id_token'. For acquireTokenRedirect, tokenType:'access_token'.\r\n\r\n    console.log('Global Token ' + token);\r\n    if (token) {\r\n        userAgentApplication\r\n            .acquireTokenSilent(\r\n                graphAPIScopes,\r\n                userAgentApplication.authority,\r\n                userAgentApplication.getUser()\r\n            )\r\n            .then(\r\n                function(accessToken) {\r\n                    console.log('authCallback :' + accessToken);\r\n                },\r\n                function(acquireTokenSilentError: any) {\r\n                    console.log(acquireTokenSilentError);\r\n                    userAgentApplication.acquireTokenPopup(graphAPIScopes).then(\r\n                        function(accessToken) {\r\n                            console.log('On pop Access Token' + accessToken);\r\n                        },\r\n                        function(acquireTokenPopupError) {\r\n                            console.log(acquireTokenPopupError);\r\n                        }\r\n                    );\r\n                }\r\n            );\r\n    } else if (errorDesc || error) {\r\n        console.log(error + ':' + errorDesc);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class O365AuthService {\r\n    public access_token = null;\r\n    public user;\r\n    public isAuthenticated = false;\r\n    public msGraphclient: any;\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private router: Router,\r\n        private token1: TokenStorage,\r\n        // private createRoomService: SspRoomService,\r\n    ) {\r\n        userAgentApplication = new Msal.UserAgentApplication(\r\n            environment.msalconfig.clientID,\r\n            null,\r\n            (errorDesc, token, error, tokenType) => {\r\n                console.log('O365Token :' + tokenType + token);\r\n            },\r\n            {\r\n                cacheLocation: 'localStorage',\r\n                logger: logger,\r\n                redirectUri: environment.msalconfig.redirectUri,\r\n                // isAngular: true\r\n            },\r\n        ); // cacheLocation defaults to sessionStorage if not set in the constructor\r\n    }\r\n\r\n    public getUser() {\r\n        return this.authenticated.then(\r\n            isauthenticated => (isauthenticated ? userAgentApplication.getUser() : {}),\r\n        );\r\n    }\r\n\r\n    get authenticated() {\r\n        return this.token.then(t => !!t);\r\n    }\r\n\r\n    get token() {\r\n        return this.getToken();\r\n    }\r\n\r\n    public login() {\r\n        return this.loginRedirect();\r\n    }\r\n\r\n    public getToken(): Promise<string> {\r\n        return userAgentApplication\r\n            .acquireTokenSilent(\r\n                graphAPIScopes,\r\n                userAgentApplication.authority,\r\n                userAgentApplication.getUser(),\r\n            )\r\n            .then(token => {\r\n                return token;\r\n            })\r\n            .catch(error => {\r\n                return userAgentApplication\r\n                    .acquireTokenPopup(graphAPIScopes)\r\n                    .then(token => {\r\n                        return Promise.resolve(token);\r\n                    })\r\n                    .catch(innererror => {\r\n                        return Promise.resolve('');\r\n                    });\r\n            });\r\n    }\r\n\r\n    public tokenReceivedCallBack(errorDesc, token, error, tokenType) {\r\n        console.log('Callback for login');\r\n        console.log(tokenType + token);\r\n        this.syncRooms();\r\n    }\r\n\r\n    public getO365Rooms(roomNameToSearch: string, callback) {\r\n        this.getToken().then(\r\n            // Get Access Token\r\n            access_token => {\r\n                if (access_token) {\r\n                    this.msGraphclient = MicrosoftGraphClient.Client.init({\r\n                        authProvider: done => {\r\n                            done(null, access_token); // first parameter takes an error if you can't get an access token\r\n                        },\r\n                    });\r\n\r\n                    // let roomNameToSearch = '';\r\n                    if (\r\n                        roomNameToSearch != null &&\r\n                        roomNameToSearch.length > 0 &&\r\n                        roomNameToSearch.toLowerCase().trim() !== 'all'\r\n                    ) {\r\n                        roomNameToSearch =\r\n                            '&$filter = startswith(displayName, \\'' + roomNameToSearch + '\\')';\r\n                    }\r\n                    // Fetch room information\r\n                    //\r\n                    this.msGraphclient\r\n                        .api('users?$select=id,displayName,userPrincipalName,userType,officeLocation&$top=10' + roomNameToSearch)\r\n                        .version('v1.0')\r\n                        .get((err, res) => {\r\n                            console.log(res);\r\n                            const rooms = [];\r\n                            for (const resIter of res.value) {\r\n                                // const room: MicrosoftGraph.EmailAddress = resIter.userPrincipalName;\r\n                                rooms.push({\r\n                                    name: resIter.displayName.toString(),\r\n                                    emailId: resIter.userPrincipalName.toString(),\r\n                                });\r\n                            } // Iterate Rooms\r\n                            callback(rooms);\r\n                        });\r\n                }\r\n            },\r\n        );\r\n\r\n    }\r\n\r\n    public syncRooms() {\r\n        this.getToken().then(\r\n            // Get Access Token\r\n            access_token => {\r\n                if (access_token) {\r\n                    this.msGraphclient = MicrosoftGraphClient.Client.init({\r\n                        authProvider: done => {\r\n                            done(null, access_token); // first parameter takes an error if you can't get an access token\r\n                        },\r\n                    });\r\n\r\n                    // Fetch room information\r\n                    //\r\n                    this.msGraphclient\r\n                        .api('/me/people?$top=1000&$filter=personType/subclass eq \\'Room\\'')\r\n                        .version('v1.0')\r\n                        .get((err, res) => {\r\n                            console.log(res);\r\n                            // const rooms: [MicrosoftGraph.EmailAddress] = res.value;\r\n                            for (const resIter of res.value) {\r\n                                const room: MicrosoftGraph.EmailAddress = resIter.userPrincipalName;\r\n                                const createRoom = {\r\n                                    id: '',\r\n                                    RoomName: room.toString(),\r\n                                    DisplayModel: '',\r\n                                    PcId: '',\r\n                                    BotId: '',\r\n                                    StationId: '',\r\n                                    TenantId: this.token1.getTenantName(),\r\n                                    TenantValue: this.token1.getTenantValue(),\r\n                                };\r\n                                // this.createRoomService.createSspRoom(createRoom).subscribe(data => {\r\n                                //     console.log('' + JSON.stringify(data));\r\n                                // });\r\n                            } // Iterate Rooms\r\n                        });\r\n                }\r\n            },\r\n        );\r\n    }\r\n\r\n    public logout() {\r\n        userAgentApplication.logout();\r\n    }\r\n    private loginRedirect() {\r\n        userAgentApplication.loginRedirect(graphAPIScopes);\r\n    }\r\n}\r\n"],"sourceRoot":""}